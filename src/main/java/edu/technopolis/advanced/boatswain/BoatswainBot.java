package edu.technopolis.advanced.boatswain;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.util.List;
import java.util.Objects;
import java.util.Properties;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import edu.technopolis.advanced.boatswain.incoming.request.Message;
import edu.technopolis.advanced.boatswain.incoming.request.MessageNotification;
import edu.technopolis.advanced.boatswain.request.GetSubscriptionsRequest;
import edu.technopolis.advanced.boatswain.request.SendMessagePayload;
import edu.technopolis.advanced.boatswain.request.SendMessageRequest;
import edu.technopolis.advanced.boatswain.request.SendRecipient;
import edu.technopolis.advanced.boatswain.request.SubscribePayload;
import edu.technopolis.advanced.boatswain.request.SubscribeRequest;
import edu.technopolis.advanced.boatswain.response.GetSubscriptionsResponse;
import edu.technopolis.advanced.boatswain.response.Joker;
import edu.technopolis.advanced.boatswain.response.SendMessageResponse;
import edu.technopolis.advanced.boatswain.response.SubscribeResponse;
import edu.technopolis.advanced.boatswain.response.Subscription;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class BoatswainBot {
    private static final Logger log = LoggerFactory.getLogger(BoatswainBot.class);

    public static final String strangeJoke = "ой. я, кажется, разучился шутить";

    private static int lastAnswer=0;
    private static int counter=0;
    private static String botEndpoint;

    public static void main(String[] args) {
        Properties props = new Properties();
        log.info("Reading application properties...");
        try {
            props.load(BoatswainBot.class.getResourceAsStream("/application.properties"));
        } catch (IOException e) {
            log.error("Failed to read application properties. Terminating application...");
            System.exit(1);
        }
        ApiClient okClient = createClient(props);

        try {
            GetSubscriptionsResponse response = okClient.get(
                    new GetSubscriptionsRequest(props.getProperty("ok.api.endpoint.subscriptions")), GetSubscriptionsResponse.class);
            botEndpoint = props.getProperty("bot.message.endpoint");
            log.info("Checking that bot is subscribed to messages...");

            if (checkSubscribed(botEndpoint, response)) {
                log.info("Subscription exists");
            } else {
                log.info("Subscription does not exist. Making a subscription...");
                subscribe(okClient, props, botEndpoint);
                log.info("Subscription is ok");
            }
            log.info("Creating endpoint...");
            BotServer server = createServer(okClient, props);
            log.info("Server created. Waiting for incoming connections...");
            addShutDownHooks(server, okClient);
        } catch (Exception e) {
            log.error("Unexpected failure", e);
            closeClient(okClient);
            System.exit(1);
        }
    }

    private static void addShutDownHooks(BotServer server, ApiClient okClient) {
        Runtime
                .getRuntime()
                .addShutdownHook(new Thread(() -> {
                    closeClient(okClient);
                    server.stop();
                }));
    }

    private static void closeClient(ApiClient client) {
        if (client != null) {
            try {
                client.close();
            } catch (IOException ce) {
                log.error("Failed to close client", ce);
            }
        }
    }

    private static void subscribe(ApiClient client, Properties props, String botEndpoint) throws IOException {
        SubscribeRequest req = new SubscribeRequest(props.getProperty("ok.api.endpoint.subscribe"),
                new SubscribePayload(botEndpoint));
        SubscribeResponse post = client.post(req, SubscribeResponse.class);
        if (!post.isSuccess()) {
            throw new IllegalStateException("Failed to subscribe bot to messages");
        }
    }

    private static boolean checkSubscribed(String botEndpoint, GetSubscriptionsResponse subscriptionsResponse) {
        if (subscriptionsResponse.getSubscriptions() == null || subscriptionsResponse.getSubscriptions().isEmpty()) {
            return false;
        }

        for (Subscription subscription : subscriptionsResponse.getSubscriptions()) {
            if (Objects.equals(subscription.getUrl(), botEndpoint)) {
                return true;
            }
        }
        return false;
    }

    private static ApiClient createClient(Properties props) {
        String schema = props.getProperty("ok.api.schema", "https");
        String host = props.getProperty("ok.api.host");
        String tokenParamName = props.getProperty("ok.api.param.token");
        String token = props.getProperty("ok.api.access_token");
        return new ApiClient(schema, host, tokenParamName + '=' + token);
    }

    private static BotServer createServer(ApiClient okClient, Properties props) throws IOException {
        try {
            return new BotServer(
                    props.getProperty("bot.message.local.endpoint"),
                    new MessageSender(okClient, props)::send
            ).start();
        } catch (IOException e) {
            log.error("Failed to initialize http server on port 80");
            throw e;
        }
    }

    private static class MessageSender {

        private final ApiClient client;
        private final String phrase;
        private final String joke;
        private final String sendEndpoint;

        MessageSender(ApiClient okClient, Properties props) {
            this.client = okClient;
            this.phrase = props.getProperty("bot.jokePhrase");
            this.joke = props.getProperty("bot.joke");
            this.sendEndpoint = props.getProperty("ok.api.endpoint.send");
        }

        boolean send(MessageNotification notif) {
            SendMessageRequest req = null;
            if (notif.getMessage().getText() == null && notif != null) {
                log.info("Message notification contains no text <{}>", notif);
                req = new SendMessageRequest(sendEndpoint, notif.getRecipient().getChatId())
                        .setPayload(
                                new SendMessagePayload(
                                        new SendRecipient(notif.getSender().getUserId()),
                                        new Message("эй! я ж слепой! я только читать умею...")
                                )
                        );
                try {
                    return client.post(req, SendMessageResponse.class).getMessageId() != null;
                } catch (IOException e) {
                    log.error("Failed to send message", e);
                    return false;
                }
            }

            if (notif == null || notif.getMessage() == null ) {
                log.info("Message notification contains no text <{}>", notif);
                return true;
            }


            if (notif.getRecipient() == null || notif.getRecipient().getChatId() == null) {
                log.warn("Message notification does not contain chat id <{}>", notif);
                return false;
            }


            //блок формирования выдачи ответов
            try {
                String message = notif.getMessage().getText().toLowerCase();
                //String sp = notif.getMessage().getPayload().toLowerCase();
                //алоха
                if (message.startsWith("алоха")) {
                    if(lastAnswer!=1) {
                        counter = 0;
                        lastAnswer = 1;
                    }
                        req = new SendMessageRequest(sendEndpoint, notif.getRecipient().getChatId())
                                .setPayload(
                                        new SendMessagePayload(
                                                new SendRecipient(notif.getSender().getUserId()),
                                                new Message("Даров, дружище!")
                                        )
                                );
                    counter++;

                //привет
                } else if (message.startsWith("привет")) {
                    if(lastAnswer!=2) {
                        counter = 0;
                        lastAnswer = 2;
                    }
                        req = new SendMessageRequest(sendEndpoint, notif.getRecipient().getChatId())
                                .setPayload(
                                        new SendMessagePayload(
                                                new SendRecipient(notif.getSender().getUserId()),
                                                new Message("Ну, привет...")
                                        )
                                );
                    counter++;

                //эй
                } else if (message.startsWith("эй")) {
                    if(lastAnswer!=3){
                        counter = 0;
                        lastAnswer = 3;
                    }
                    req = new SendMessageRequest(sendEndpoint, notif.getRecipient().getChatId())
                            .setPayload(
                                    new SendMessagePayload(
                                            new SendRecipient(notif.getSender().getUserId()),
                                            new Message("Чо")
                                    )
                            );
                    counter++;
                //как дела
                } else if (message.startsWith("как дела")) {
                    if (lastAnswer != 4) {
                        counter = 0;
                        lastAnswer = 4;
                    }
                    req = new SendMessageRequest(sendEndpoint, notif.getRecipient().getChatId())
                            .setPayload(
                                    new SendMessagePayload(
                                            new SendRecipient(notif.getSender().getUserId()),
                                            new Message("Нормас")
                                    )
                            );
                    counter++;
                //башорг
                } else if (message.contains("анекдот")) {
                    if(lastAnswer!=5){
                        counter = 0;
                        lastAnswer = 5;
                    }

                    if(counter!=4 && counter!=5) {
                        req = new SendMessageRequest(sendEndpoint, notif.getRecipient().getChatId())
                                .setPayload(
                                        new SendMessagePayload(
                                                new SendRecipient(notif.getSender().getUserId()),
                                                new Message(Joker.bashImRnd())
                                        )
                                );
                    }
                    else if(counter==4) {
                        req = new SendMessageRequest(sendEndpoint, notif.getRecipient().getChatId())
                                .setPayload(
                                        new SendMessagePayload(
                                                new SendRecipient(notif.getSender().getUserId()),
                                                new Message(strangeJoke)
                                        )
                                );
                    } else if(counter==5) {
                        req = new SendMessageRequest(sendEndpoint, notif.getRecipient().getChatId())
                                .setPayload(
                                        new SendMessagePayload(
                                                new SendRecipient(notif.getSender().getUserId()),
                                                new Message("нет, серьезно! разучился я...")
                                        )
                                );

                    }else if(counter==6) {
                        req = new SendMessageRequest(sendEndpoint, notif.getRecipient().getChatId())
                                .setPayload(
                                        new SendMessagePayload(
                                                new SendRecipient(notif.getSender().getUserId()),
                                                new Message("а ты напорист! мне нравится! что ж, держи еще. \n" + Joker.bashImRnd())
                                        )
                                );
                    }
                    counter++;
                //кот. 
                }else if (message.startsWith("кот")) {
                    if(lastAnswer!=6){
                        counter = 0;
                        lastAnswer = 6;
                    }

                    req = new SendMessageRequest(sendEndpoint, notif.getRecipient().getChatId())
                            .setPayload(
                                    new SendMessagePayload(
                                            new SendRecipient(notif.getSender().getUserId()),
                                            new Message(/*"IMAGE", "http://lorempixel.com/200/200/cats/"*/"http://lorempixel.com/200/200/cats/")
                                    )
                            );
                    counter++;
                //типа не нашли, на что реагировать
                } else {
                    lastAnswer=0;
                    counter=0;
                    log.info("Message notification does not contain parsable phrase <{}>", notif);

                    req = new SendMessageRequest(sendEndpoint, notif.getRecipient().getChatId())
                            .setPayload(
                                    new SendMessagePayload(
                                            new SendRecipient(notif.getSender().getUserId()),
                                            new Message("Сорян, но я не понял :(")
                                    )
                            );
                }
            } catch (IOException e) {
                e.printStackTrace();
            }

            //здесь отсылаем сообщеньку в ответ
            try {
                return client.post(req, SendMessageResponse.class).getMessageId() != null;
            } catch (IOException e) {
                log.error("Failed to send message", e);
                return false;
            }
        }
    }

}
